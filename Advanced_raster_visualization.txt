// Load the ERA5 reanalysis monthly means.
var era5=ee.ImageCollection('ECMWF/ERA5_LAND/MONTHLY');
// Load the palettes package.
var palettes=require('users/gena/packages:palettes');
// Select temperature near ground.
era5=era5.select('temperature_2m');
// Choose a diverging colormap for anomalies.
var balancePalette=palettes.cmocean.Balance[7];
var threeColorPalette=['blue', 'white', 'red'];
// Show the palette in the Inspector window.
palettes.showPalette('temperature anomaly', balancePalette);
palettes.showPalette('temperature anomaly', threeColorPalette);
// Select 2 time windows of 10 years.
var era5_1980=era5.filterDate('1981-01-01', '1991-01-01').mean();
var era5_2010=era5.filterDate('2011-01-01', '2020-01-01').mean();
// Compute the temperature change.
var era5_diff=era5_2010.subtract(era5_1980);
// Show it on the map.
Map.addLayer(era5_diff,{
   palette: threeColorPalette,
   min: -2,
   max: 2
}, 'Blue White Red palette');
Map.addLayer(era5_diff,{
   palette: balancePalette,
   min: -2,
   max: 2
}, 'Balance palette');
// An image of the Thwaites glacier.
var imageId=
'COPERNICUS/S1_GRD/S1B_EW_GRDM_1SSH_20211216T041925_20211216T042029_030045_03965B_AF0A';
// Look it up and select the HH band.
var img=ee.Image(imageId).select('HH');
// Use the palette library.
var palettes=require('users/gena/packages:palettes');
// Access the ice palette.
var icePalette=palettes.cmocean.Ice[7];
// Show it in the console.
palettes.showPalette('Ice', icePalette);
// Use  it to visualize the radar data.
Map.addLayer(img,{
   palette: icePalette,
   min: -15,
   max: 1
}, 'Sentinel-1 radar');
// Zoom to the grounding line of the Thwaites Glacier.
Map.centerObject(ee.Geometry.Point([-105.45882094907664, -
   74.90419580705336
]), 8);
// Advanced remapping using NLCD.
// Import NLCD.
var nlcd=ee.ImageCollection('USGS/NLCD_RELEASES/2016_REL');

// Use Filter to select the 2016 dataset.
var nlcd2016=nlcd.filter(ee.Filter.eq('system:index', '2016'))
   .first();

// Select the land cover band.
var landcover=nlcd2016.select('landcover');

// Map the NLCD land cover.
Map.addLayer(landcover, null, 'NLCD Landcover');
// Now suppose we want to change the color palette.
var newPalette=['466b9f', 'd1def8', 'dec5c5',
   'ab0000', 'ab0000', 'ab0000',
   'b3ac9f', '68ab5f', '1c5f2c',
   'b5c58f', 'af963c', 'ccb879',
   'dfdfc2', 'd1d182', 'a3cc51',
   '82ba9e', 'dcd939', 'ab6c28',
   'b8d9eb', '6c9fb8'
];
// Try mapping with the new color palette.
Map.addLayer(landcover,{
   palette: newPalette
}, 'NLCD New Palette');
// Extract the class values and save them as a list.
var values=ee.List(landcover.get('landcover_class_values'));
// Print the class values to console.
print('raw class values', values);
// Determine the maximum index value
var maxIndex=values.size().subtract(1);
// Create a new index for the remap
var indexes=ee.List.sequence(0, maxIndex);
// Print the updated class values to console.
print('updated class values', indexes);
// Remap NLCD and display it in the map.
var colorized=landcover.remap(values, indexes)
   .visualize({
       min: 0,
       max: maxIndex,
       palette: newPalette
   });
Map.addLayer(colorized,{}, 'NLCD Remapped Colors');
// Include the text package.
var text=require('users/gena/packages:text');
// Configure map (change center and map type).
Map.setCenter(0, 0, 10);
Map.setOptions('HYBRID');
// Draw text string and add to map.
var pt=Map.getCenter();
var scale=Map.getScale();
var image=text.draw('Hello World!', pt, scale);
Map.addLayer(image);
var image=text.draw('Hello World!', pt, scale,{
   fontSize: 32,
   fontType: 'Consolas',
   textColor: 'black',
   outlineColor: 'white',
   outlineWidth: 1,
   outlineOpacity: 0.8
});
// Add the text image to the map.
Map.addLayer(image);
var text=require('users/gena/packages:text');

var geometry=ee.Geometry.Polygon(
   [
       [
           [-109.248, 43.3913],
           [-109.248, 33.2689],
           [-86.5283, 33.2689],
           [-86.5283, 43.3913]
       ]
   ], null, false);

Map.centerObject(geometry, 6);

function annotate(image){
   // Annotates an image by adding outline border and cloudiness
   // Cloudiness is shown as a text string rendered at the image center.

   // Add an edge around the image.
   var edge=ee.FeatureCollection([image])
       .style({
           color: 'cccc00cc',
           fillColor: '00000000'
       });

   // Draw cloudiness as text.
   var props={
       textColor: '0000aa',
       outlineColor: 'ffffff',
       outlineWidth: 2,
       outlineOpacity: 0.6,
       fontSize: 24,
       fontType: 'Consolas'
   };
   var center=image.geometry().centroid(1);
   var str=ee.Number(image.get('CLOUD_COVER')).format('%.2f');
   var scale=Map.getScale();
   var textCloudiness=text.draw(str, center, scale, props);
   // Shift left 25 pixels.
   textCloudiness=textCloudiness
       .translate(-scale * 25, 0, 'meters', 'EPSG:3857');

   // Merge results.
   return ee.ImageCollection([edge, textCloudiness]).mosaic();
}
// Select images.
var images=ee.ImageCollection('LANDSAT/LC08/C02/T1_RT_TOA')
   .select([5, 4, 2])
   .filterBounds(geometry)
   .filterDate('2018-01-01', '2018-01-7');
// dim background.
Map.addLayer(ee.Image(1),{
   palette: ['black']
}, 'black', true, 0.5);
// Show images.
Map.addLayer(images,{
   min: 0.05,
   max: 1,
   gamma: 1.4
}, 'images');
// Show annotations.
var labels=images.map(annotate);
var labelsLayer=ui.Map.Layer(labels,{}, 'annotations');
Map.layers().add(labelsLayer);
// re-render (rescale) annotations when map zoom changes.
Map.onChangeZoom(function(zoom){
   labelsLayer.setEeObject(images.map(annotate));
});