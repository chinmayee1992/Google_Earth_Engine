/////
// View an Image Collection
/////

// Import the Landsat 8 Raw Collection.
var landsat8=ee.ImageCollection('LANDSAT/LC08/C02/T1');

// Print the size of the Landsat 8 dataset.
print('The size of the Landsat 8 image collection is:', landsat8
.size());

// Try to print the image collection.
// WARNING! Running the print code immediately below produces an error because
// the Console can not print more than 5000 elements.
print(landsat8);

// Add the Landsat 8 dataset to the map as a mosaic. The collection is
// already chronologically sorted, so the most recent pixel is displayed.
Map.addLayer(landsat8,
   {
       bands: ['B4', 'B3', 'B2'],
       min: 5000,
       max: 15000
   },
   'Landsat 8 Image Collection');
   
//Filtering Image Collection
/////
// Filter an Image Collection
/////

// Filter the collection by date.
var landsatWinter=landsat8.filterDate('2020-12-01', '2021-03-01');

Map.addLayer(landsatWinter,
   {
       bands: ['B4', 'B3', 'B2'],
       min: 5000,
       max: 15000
   },
   'Winter Landsat 8');

print('The size of the Winter Landsat 8 image collection is:',
   landsatWinter.size());
   
// Create an Earth Engine Point object.
var pointMN=ee.Geometry.Point([-93.79, 45.05]);

// Filter the collection by location using the point.
var landsatMN=landsatWinter.filterBounds(pointMN);
Map.addLayer(landsatMN,
   {
       bands: ['B4', 'B3', 'B2'],
       min: 5000,
       max: 15000
   },
   'MN Landsat 8');
/////
// Collections of single images - Landsat 8 Surface Reflectance
/////

// Create and Earth Engine Point object over San Francisco.
var pointSF=ee.Geometry.Point([-122.44, 37.76]);

// Import the Landsat 8 Surface Reflectance collection.
var landsat8SR=ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');

// Filter the collection and select the first image.
var landsat8SRimage=landsat8SR.filterDate('2014-03-18',
       '2014-03-19')
   .filterBounds(pointSF)
   .first();

print('Landsat 8 Surface Reflectance image', landsat8SRimage);

// Center map to the first image.
Map.centerObject(landsat8SRimage, 8);

// Add first image to the map.
Map.addLayer(landsat8SRimage,
   {
       bands: ['SR_B4', 'SR_B3', 'SR_B2'],
       min: 7000,
       max: 13000
   },
   'Landsat 8 SR');
// Pre-Made Composites
/////
// Pre-made composites
/////

// Import a MODIS dataset of daily BRDF-corrected reflectance.
var modisDaily=ee.ImageCollection('MODIS/006/MCD43A4');

// Filter the dataset to a recent date.
var modisDailyRecent=modisDaily.filterDate('2021-11-01');

// Add the dataset to the map.
var modisVis={
   bands: [
       'Nadir_Reflectance_Band1',
       'Nadir_Reflectance_Band4',
       'Nadir_Reflectance_Band3'
   ],
   min: 0,
   max: 4000
};
Map.addLayer(modisDailyRecent, modisVis, 'MODIS Daily Composite');

// MODIS Monthly Burn Area
// Import the MODIS monthly burned areas dataset.
var modisMonthly=ee.ImageCollection('MODIS/006/MCD64A1');
// Filter the dataset to a recent month during fire season.
var modisMonthlyRecent=modisMonthly.filterDate('2021-08-01');
// Add the dataset to the map.
Map.addLayer(modisMonthlyRecent, {}, 'MODIS Monthly Burn');

// Other Satellite Products
// Import a Sentinel-5 methane dataset.
var methane=ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_CH4');

// Filter the methane dataset.
var methane2018=methane.select(
       'CH4_column_volume_mixing_ratio_dry_air')
   .filterDate('2018-11-28', '2018-11-29')
   .first();
// Make a visualization for the methane data.
var methaneVis={
   palette: ['black', 'blue', 'purple', 'cyan', 'green',
       'yellow', 'red'
   ],
   min: 1770,
   max: 1920
};
// Center the Map.
Map.centerObject(methane2018, 3);

// Add the methane dataset to the map.
Map.addLayer(methane2018, methaneVis, 'Methane');

// Weather and  Climate data
// Import the ERA5 Monthly dataset
var era5Monthly=ee.ImageCollection('ECMWF/ERA5/MONTHLY');

// Filter the dataset
var era5MonthlyTemp=era5Monthly.select('mean_2m_air_temperature')
   .filterDate('2018-01-01', '2019-01-31')
   .first();
   
// Add the ERA dataset to the map.                  
Map.addLayer(era5MonthlyTemp,
   {
       palette: ['yellow', 'red'],
       min: 260,
       max: 320
   },
   'ERA5 Max Monthly Temp');

//ESA WorldCover
/////
// Pre-classified Land Use Land Cover
/////

// Import the ESA WorldCover dataset.
var worldCover=ee.ImageCollection('ESA/WorldCover/v100').first();

// Center the Map.
Map.centerObject(worldCover, 3);

// Add the worldCover layer to the map.
Map.addLayer(worldCover,{
   bands: ['Map']
}, 'WorldCover');

//Global Forest Change
// Import the Hansen Global Forest Change dataset.
var globalForest=ee.Image(
   'UMD/hansen/global_forest_change_2020_v1_8');

// Create a visualization for tree cover in 2000.
var treeCoverViz={
   bands: ['treecover2000'],
   min: 0,
   max: 100,
   palette: ['black', 'green']
};

// Add the 2000 tree cover image to the map.
Map.addLayer(globalForest, treeCoverViz, 'Hansen 2000 Tree Cover');

// Create a visualization for the year of tree loss over the past 20 years.
var treeLossYearViz={
   bands: ['lossyear'],
   min: 0,
   max: 20,
   palette: ['yellow', 'red']
};

// Add the 2000-2020 tree cover loss image to the map.
Map.addLayer(globalForest, treeLossYearViz, '2000-2020 Year of Loss');

// Digital Elevation Model

// Import the NASA DEM Dataset.
var nasaDEM=ee.Image('NASA/NASADEM_HGT/001');

// Add the elevation layer to the map.
Map.addLayer(nasaDEM,{
   bands: ['elevation'],
   min: 0,
   max: 3000
}, 'NASA DEM')